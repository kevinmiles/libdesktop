{
  "success": [
    [
      {
        "_": [
          ""
        ],
        "@file": [
          " dsknapi.h\n"
        ],
        "@brief": [
          " NAPI functions and macros helpers\n"
        ],
        "@descr": [
          "\n\nThis header file includes functions prototypes and macros that\nhelps working with Node.js NAPI framework.\n"
        ]
      },
      {
        "@name": [
          " DSK_NAPI_CALL"
        ],
        "@brief": [
          " wraps its FN argument with code to check that a NAPI call succeded.\n"
        ],
        "@descr": [
          "\n\nDSK_NAPI_CALL macro wraps its FN argument\nwith code to check that a napi call succeded.\nFN argument must be an expression that evaluates\nto an object of `napi_status` type.\n\nThe entire macro is wrapped in a do {} while, so it\ndoesn't pollute the calling stack with variables.\n\nThe macro does these assumptions on the calling scope:\n\n * an `dsk_env` variable is defined of type `napi_env` that contains the current\n   NAPI environment to use.\n * a `dsk_error_msg` variable is declared of type char*.\n   This variable will contain the error message in case an error\n   occurs during the call.  \n * a `dsk_error` label is defined. Execution will jump to that label\n   after appropriately setting the dsk_error_msg variable.\n \nIf you are using the DSK_NAPI_CALL macro in a function that calls\nthe DSK_JS_FUNC_INIT* macro, that macro already appropriately defines\nin the scope all variables needed by DSK_NAPI_CALL. Otherwise, it is \ncaller responsibility to appropriately prepare the scope before \nthe call to DSK_NAPI_CALL.\n"
        ],
        "@arg": [
          " FN - an expression that evaluates to `napi_status`, usually \n\t\ta NAPI function call."
        ]
      },
      {
        "@name": [
          " DSK_JS_FUNC\n\nDSK_JS_FUNC declares a js callback function prototype given the name.\nIt can be used to declare a function in a header file:\n\n```c\n\n DSK_JS_FUNC(external_function);\n\n```\n\nor otherwise to define a function in a source file:\n\n```c\n\nDSK_JS_FUNC(external_function) {\n\n // do something interesting here...\n\n // and return something useful.\n return NULL;\n}\n\n```\n"
        ]
      },
      {
        "@name": [
          " DSK_JS_FUNC_INIT"
        ],
        "@brief": [
          " initialize a scope with the following variables:\n"
        ],
        "@descr": [
          "\nThe macro does these assumptions on the calling scope:\n * an `env` variable is defined of type `napi_env` that contains the current\n   NAPI environment to use.\n * an `info` variable is declared of type napi_callback_info.\n   This variable will contain the error message in case an error\n   occurs during the call. \nThis two requirement are already satisfied by the protype required by callback \nfunctions.\n\nThe macro uses `env` and `info` to extract arguments of the call, and defines \nin current scope the following additional variables:\n \n * a `dsk_error_msg` variable of type char* that is compiled by NAPI_CALL in case of errors. \n * a `dsk_error` label to which execution will jump in case of error. It contains code to\n   throw a JS error with the message contained in `dsk_error_msg` variable, and return NULL afterward;  \n * an `argc` variable of type size_t that contains the actual number of argument \n   passed to the function by the caller.  \n * an `argv` array of type napi_value[] that contains the actual number of argument \n   passed to the function by the caller. If the function is given more than 10 arguments, the remaining\n   one are ignored. If it's given less than 10 arguments, than argv elements from\n   `argc` to 10 are filled witth `napi_undefined`. If you have to use accepts more than 10 \n   arguments, use `DSK_JS_FUNC_INIT_WITH_ARGS` macro to specify a greater number.\n * a `this` variable, of type napi_value, that contains the receiver of the call (the JS `this` value);\n * an `argc` variable of type size_t containing actual number of arguments received in the call.\n "
        ]
      },
      {
        "\t@name": [
          " DSK_ONERROR_THROW_RET"
        ],
        " @brief": [
          " defines an error handler that throw a JavaScript error.\n "
        ],
        " @descr": [
          "\n\tThis macro defines following variables in current scope:\n\n * a `dsk_error_msg` variable of type char* that is compiled by DSK_NAPI_CALL in \n   case of errors. \n * a `dsk_error` label to which execution will jump in case of error. It contains\n   code to throw a JS error with the message contained in `dsk_error_msg` variable, \n   and return `WHAT` argument afterward;  "
        ],
        " @arg": [
          " WHAT - an expression to return that signal the caller that an error occurred."
        ]
      },
      {
        "\t@name": [
          " DSK_ONERROR_FATAL_RET"
        ],
        " @brief": [
          " defines an error handler that throw a JavaScript error."
        ],
        " @descr": [
          "\n\n\tThis macro defines following variables in current scope:\n\n * a `dsk_error_msg` variable of type char* that is compiled by DSK_NAPI_CALL in \n   case of errors. \n * a `dsk_error` label to which execution will jump in case of error. It contains\n   code to call `napi_fatal_error` with the message contained in `dsk_error_msg` variable, \n   and return `WHAT` argument afterward. The call to `napi_fatal_error` causes the node process\n\t  to immediately exit."
        ],
        " @arg": [
          " WHAT - an expression to return that signal the caller that an error occurred."
        ]
      },
      {
        "\t@name": [
          " DSK_ONERROR_FATAL_RET\n "
        ],
        " @descr": [
          "\n\tThis macro defines following variables in current scope:\n\n * a `dsk_error_msg` variable of type char* that is compiled by DSK_NAPI_CALL in \n   case of errors. \n * a `dsk_error` label to which execution will jump in case of error. It contains\n   code to throw an uncaught Javascript exception with the message contained in `dsk_error_msg` \n   variable, and return `WHAT` argument afterward. \n\n/\t"
        ]
      },
      {
        "@name": [
          " DSK_JS_FUNC_INIT_WITH_ARGS"
        ],
        "@brief": [
          " initialize a function scope with a set of standard variables\n"
        ],
        "@descr": [
          "\n\nYou can use this function when you have to accepts more than 10 arguments in your \ncallback. Use `DSK_JS_FUNC_INIT` when <= 10 arguments are required. \n"
        ],
        "@see": [
          " `DSK_JS_FUNC_INIT`\n*/"
        ]
      },
      {
        "@name": [
          " DSK_AT_LEAST_NARGS"
        ],
        "@brief": [
          " Throw a \"EINVAL\" errors if the callback is not called with at least N arguments.\n"
        ],
        "@descr": [
          "\n\nThe calling scope must contains `env`, `argc` and `dsk_error_msg` variables, and a `dsk_error` label.\n\n*/"
        ]
      },
      {
        "@name": [
          " DSK_EXACTLY_NARGS"
        ],
        "@brief": [
          " Throw a \"EINVAL\" errors if the callback is not called with exactly N arguments.\n"
        ],
        "@descr": [
          "\n\nThe calling scope must contains `env`, `argc` and `dsk_error_msg` variables, and a `dsk_error` label.\n*/"
        ]
      }
    ]
  ],
  "error": []
}